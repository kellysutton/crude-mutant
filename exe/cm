#!/usr/bin/env ruby
# frozen_string_literal: true

require "crude-mutant"
require "optparse"

Options = Struct.new(
  :use_json_printer,
  :section,
  :section_total,
  :test_command,
  :file_to_mutate,
)

args = Options.new(false, 1, 1)
OptionParser.new do |opts|
  opts.banner = "Usage: crude-mutant [options]"

  opts.on("-j", "--json", "Print JSON out to STDOUT") do |v|
    args.use_json_printer = v
  end

  opts.on("-sSECTION", "--section=SECTION", "Number of current section when parallelizing") do |s|
    args.section = s.to_i
  end

  opts.on("-tSECTION_TOTAL", "--section_total=SECTION_TOTAL", "Number of total sections when parallelizing") do |s|
    args.section_total = s.to_i
  end

  opts.on("-cTEST_COMMAND", "--test_command=TEST_COMMAND", "Test command to run") do |t|
    args.test_command = t
  end

  opts.on("-fFILE_TO_MUTATE", "--file=FILE_TO_MUTATE", "File to mutate for each run") do |t|
    args.file_to_mutate = t
  end
end.parse!

if !args.file_to_mutate || !args.test_command
  puts "Usage: crude-mutant [options]"
  puts ""
  puts "Example:"
  puts "  crude-mutant --test_command=\"bundle exec rspec\" --file=app/models/post.rb"
  exit(1)
end

printer = args.use_json_printer ? :json : :standard

if printer == :json
  CrudeMutant.start(args.file_to_mutate, args.test_command, result_printer: printer, section: args.section, total_sections: args.section_total)
else
  CrudeMutant.start(args.file_to_mutate, args.test_command, result_printer: printer, section: args.section, total_sections: args.section_total) do |progress|
    clear_string = ' ' * CrudeMutant::TerminalCalculator.new.calculate_length
    $stdout.print clear_string
    $stdout.print "\r"

    completed = "Completed #{progress.run_results.size}/#{progress.total_runs_to_perform}"
    average = "Average time per run: #{progress.avg_time.round(2)} second(s)"
    eta_time = (progress.total_runs_to_perform - progress.run_results.size) * progress.avg_time
    eta = "Estimated time of completion: #{eta_time.round(2)} seconds"
    $stdout.print "#{completed} #{average} #{eta}\r"
    $stdout.flush
  end
end
